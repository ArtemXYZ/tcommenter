Текущая версия:

0. Исправить уязвимость на sql-инъекции: +
   Исправить уязвимость на sql-инъекции во всех методах;+
   Как выбрасывать ошибку на верхний уровень;+-
   Обрабатывать ошибку сразу в верхнем уровне или можно во вложенной функции.

   Дописать пай-тесты:
        - уточнить как связать тесты с релизом (конфигурационный файл);
        - уточнить можно ли тестировать без реальных запросов к базе данных;
        - Дописать тесты (по несколько вариантов на метод);
        - Сделать вариант групповых тестов.

!1. Поправить описание методов (наполнение)
!2. Добавить в описание Сфинкс стайл (добавить описание аргументов).
!3. Выполнить очистку от излишних комментариев готовый пред релизный код.
!4. Выполнить перевод всех комментариев и описаний методов с классом.
!5. * Сгенерировать документацию (на основе комментариев в классе) - возможно перенести в следующую версию.
!6. Добавить описание в ридми.
7. Создать простое лого.

        + Уточнить какой тип пайтона поддерживает моя библиотека?
        + Переписать все аннотации по новому обратно.
        + __all__ улучшить импорты, что бы не было table_commentator/table_commentator/ для пользователей


8. что еще надо добавить в __all__?
    например
                import sys
                if sys.version_info < (3, 8):
                    # Используйте альтернативу для старых версий Python
                    pass

    или

        import sys
        if sys.version_info < (3, 8):
            # Используйте альтернативу для старых версий Python
            pass

Следующие версии:

1. Добавить класс постгресс - в след версии кода появятся другие классы с другим синтакиссом sql.
2. Добавить поддержку асинхронности
3. Добавить логирование
4. Добавить (нужно ли поетри для обновления (исключения конфликтов версий)?

5. Настроить CI/CD (авторелизы, автотестирование и др.). Узнать как осуществлять поддержку (как с этим заморачиваться).
В GitLab или GitHab.

6. Добавить совместимиость старых версий пайтон.



 Вставить в описание:
    Справка:
    В pandas используется метод сохранения данных, где под "капотом" перед сохранением сначала удаляется таблица,
    что приводит к потере метаданных таблицы (комментариев).